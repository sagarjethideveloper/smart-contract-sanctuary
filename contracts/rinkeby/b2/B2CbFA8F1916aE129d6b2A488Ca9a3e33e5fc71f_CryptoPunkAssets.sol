// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.0;

import "@openzeppelin/[emailÂ protected]/access/Ownable.sol";

contract CryptoPunkAssets is Ownable {

    enum Type { Kind, Face, Ear, Neck, Beard, Hair, Eyes, Mouth, Smoke, Nose }
    
    bytes private palette;
    mapping(uint64 => uint32) private composites;

    mapping(uint8 => bytes) private assets;
    mapping(uint8 => string) private assetNames;
    mapping(uint8 => Type) private assetTypes;
    mapping(string => uint8) private maleAssets;
    mapping(string => uint8) private femaleAssets;
    
    function destroy() external onlyOwner {
        selfdestruct(payable(owner()));
    }
    
    function composite(bytes1 index, bytes1 yr, bytes1 yg, bytes1 yb, bytes1 ya) external view returns (bytes4 rgba) {
        uint x = uint(uint8(index)) * 4;
        uint8 xAlpha = uint8(palette[x + 3]);
        if (xAlpha == 0xFF) {
            rgba = bytes4(
                    (uint32(uint8(palette[x])) << 24) |
                    (uint32(uint8(palette[x+1])) << 16) |
                    (uint32(uint8(palette[x+2])) << 8) |
                    uint32(xAlpha)
                );
        } else {
            uint64 key =
                (uint64(uint8(palette[x])) << 56) |
                (uint64(uint8(palette[x + 1])) << 48) |
                (uint64(uint8(palette[x + 2])) << 40) |
                (uint64(xAlpha) << 32) |
                (uint64(uint8(yr)) << 24) |
                (uint64(uint8(yg)) << 16) |
                (uint64(uint8(yb)) << 8) |
                (uint64(uint8(ya)));
            rgba = bytes4(composites[key]);
        }
    }
    
    function getAsset(uint8 index) external view returns (bytes memory encoding) {
        encoding = assets[index];
    }
    
    function getAssetName(uint8 index) external view returns (string memory text) {
        text = assetNames[index];        
    }

    function getAssetType(uint8 index) external view returns (uint8) {
        return uint8(assetTypes[index]);
    }

    function getAssetIndex(string calldata text, bool isMale) external view returns (uint8) {
        return isMale ? maleAssets[text] : femaleAssets[text];        
    }

    function getMappedAsset(uint8 index, bool toMale) external view returns (uint8) {
        return toMale ? maleAssets[assetNames[index]] : femaleAssets[assetNames[index]];
    }
    
    function setPalette(bytes memory encoding) external onlyOwner {
        palette = encoding;
    }

    function addComposites(uint64 key1, uint32 value1, uint64 key2, uint32 value2, uint64 key3, uint32 value3, uint64 key4, uint32 value4) internal onlyOwner {
        composites[key1] = value1;
        composites[key2] = value2;
        composites[key3] = value3;
        composites[key4] = value4;
    }
    
    function addAsset(uint8 index, Type assetType, bool isMale, string memory name, bytes memory encoding) internal onlyOwner {
        assets[index] = encoding;
        assetNames[index] = name;
        assetTypes[index] = assetType;
        if (isMale) {
            maleAssets[name] = index;
        } else {
            femaleAssets[name] = index;
        }
    }

    function initializeAdditionalInternalState1() external onlyOwner {
        addComposites(10185806010002644479, 2186294015, 334398324991, 2575063551, 14620934475063635199, 3064171007, 624958130687, 942481407);
        addComposites(14620934474510063359, 2762187007, 14620934474879159807, 2963512319, 13042617595322051839, 2938928127, 2458428176373342719, 1985954815);
        addComposites(278563750143, 2760204543, 16059517963269653503, 2210894079, 332820277759, 1467042303, 14620934475081336831, 3081476351);
        addComposites(9680520719389163519, 3670916095, 15420325347100056063, 3870207743, 14620934475182135807, 3131876095, 13042617595339753471, 2956101119);
        addComposites(14620934473855947775, 2393219071, 10817651969650973183, 3720264447, 2458428175552768511, 1500334335, 3204194146176141823, 1214078463);
        addComposites(14620934474525318911, 2761327103, 13455271899935706879, 3705185535, 277806277119, 2187872767, 2458428177130815743, 2440451839);
        addComposites(3204194145705263359, 1012292095, 333472686335, 1918714879, 333640851967, 2036417791, 13455271895641358336, 3115956608);
        addComposites(13455271899936325631, 3705462015, 333305515007, 1801675263, 625107741951, 1008997375, 13042617594783735551, 2737010175);
        addComposites(14620934474055434239, 2492830719, 13042617593975144703, 2400152063, 3212546037968450303, 1788899071, 624199407359, 622070271);
        addComposites(15420325346088280575, 3060748031, 10817651969396670719, 3499912959, 3204194146513854207, 1349150207, 14620934473716728063, 2306502911);
        addComposites(13042617594446023167, 2601938431, 624670219775, 823856639, 14620934474171358719, 2559082751, 16059517966881296127, 4008359679);
        addComposites(659029958143, 756616447, 16059517962586947584, 3722304896, 2458428177385118207, 2593033215, 16059517966881914879, 4008636159);
        addComposites(14620934473633893631, 2256762879, 14620934474187606527, 2575595007, 657129996543, 255, 278818052607, 2946737151);
        addComposites(14620934472271397119, 1499820287, 14620934476549587199, 3898962175, 334652627455, 2744621055, 3204194147069872127, 1568241151);
        addComposites(3212546038118047999, 1855475199, 15420325345267706367, 2407683327, 10817651968639197695, 2860209407, 15420325346845753599, 3666765567);
        addComposites(3212546037362036223, 1553031167, 3204194147052170495, 1551068159, 332091497215, 958599935, 276777868799, 1429149439);
        addComposites(332947134463, 1562579199, 16059517966381098751, 3766649599, 3204194147793461503, 1854308351, 10185806011788525823, 2910738943);
        addComposites(332612443647, 1328289023, 3212546037394458623, 1569407999, 627065225215, 1852731135, 14620934476566364159, 3908370431);
        addComposites(3204194147037449727, 1551864319, 3212546037376756991, 1552235007, 332141631231, 992022527, 14620934476565745407, 3908026623);
        addComposites(16059517962586947839, 1869574143, 14620934475656841727, 3403080191, 3204194147643863807, 1787732223, 626659142143, 1683507711);
        addComposites(3212546036838440703, 1350317055, 14620934476211542527, 3705662207, 330712482047, 255, 10185806011031052799, 2607762943);
        addComposites(626710403583, 1700683519, 2458428175344934399, 1379015423, 661070141951, 1582782463, 332297032703, 1112554239);
        addComposites(3212546036500728319, 1215245311, 333152933631, 1699888383, 659237792255, 843131647, 13455271895641358591, 1566399999);
        addComposites(10817651967610789375, 1983585023, 14620934474379192831, 2680204287, 624878053887, 910568959, 625383082239, 1129397247);
        addComposites(13042617595913745151, 3175592191, 3212546036029849855, 1013458943, 660815839487, 1481061375, 14620934475957240063, 3569924351);
        addComposites(14620934475655328511, 3402224895, 332900354559, 1531524095, 333773229823, 2135766783, 626456101119, 1582053375);
        addComposites(14620934475199767039, 3149113087, 10185806012042828287, 3012460031, 14620934475115949055, 3098848511, 625698628095, 1262234367);
        addComposites(14620934475048914431, 3065298943, 9680520715094196479, 672860671, 13042617595307331071, 2939724287, 625530462463, 1194928639);
        addComposites(660058366463, 1178085375, 332698436607, 1380069375, 625834164991, 1329936639, 15420325345059872255, 2234652671);
        addComposites(16059517964018603519, 2576980479, 14620934475804926207, 3485312767, 13042617596063342847, 3242168319, 0, 0);
    }
    
    function initializeAdditionalInternalState2() external onlyOwner {
        addAsset(1, Type.Kind, true, "Male 1", hex"26000c2700043301863401c33501c33601f03701c33801c33901c33a01c33b01c342000a4302804301704402104401e04503804501704601b44701f04801f04901f04a01f04b01f052000a5301f05401f05503205501d05604105601e05701f05801f05901b45a015a5b000362000a6301f06401f06501f06601f067015a6801f06901a56a015a7200027301b47401f07503a07501507604417601a07701f07801f07901f07a0116830002840003850003860003870003880003890003");
        addAsset(2, Type.Kind, true, "Male 2", hex"26000c2700043305863405c33505c33605f03705c33805c33905c33a05c33b05c342000a4306804305704406104405e04507804505704605b44705f04805f04905f04a05f04b05f052000a5305f05405f05507205505d05608105605e05705f05805f05905b45a055a5b000362000a6305f06405f06505f06605f067055a6805f06905a56a055a7200027305b47405f07507a07505507608417605a07705f07805f07905f07a0516830002840003850003860003870003880003890003");
        addAsset(3, Type.Kind, true, "Male 3", hex"26000c2700043309863409c33509c33609f03709c33809c33909c33a09c33b09c342000a430970430a804409e0440a10450b804509704609b44709f04809f04909f04a09f04b09f052000a5309f05409f0550b205509d0560c105609e05709f05809f05909b45a095a5b000362000a6309f06409f06509f06609f067095a6809f06909a56a095a7200027309b47409f0750ba0750950760c417609a07709f07809f07909f07a0916830002840003850003860003870003880003890003");
        addAsset(4, Type.Kind, true, "Male 4", hex"26000c270004330d86340dc3350dc3360df0370dc3380dc3390dc33a0dc33b0dc342000a430e80430d70440e10440de0450d70450f80460db4470df0480df0490df04a0df04b0df052000a530df0540df0550dd0550f20560de0561010570df0580df0590db45a0d5a5b000362000a630df0640df0650df0660df0670d5a680df0690da56a0d5a720002730db4740df0750d50750fa0760da1761040770df0780df0790df07a0d16830002840003850003860003870003880003890003");
        addAsset(5, Type.Kind, false, "Female 1", hex"34000835000c3601c337000d38000c3900044300084402814401604501f04603484601304701f04801f04901d24a01c34b01c353000a5401f05501f05603105604205601c05701f05801f05911405901b05a01695b01f063000a6401f06501f06601f06701f06801e16911506901a06a015a6b00037300027401b47501f07603527604807701f07801f07901787a0001840002850003860003870003880003890001");
        addAsset(6, Type.Kind, false, "Female 2", hex"34000835000c3605c337000d38000c3900044300084406814405604505f04607484605304705f04805f04905d24a05c34b05c353000a5405f05505f05608205607105605c05705f05805f05912405905b05a05695b05f063000a6405f06505f06605f06705f06805e16912506905a06a055a6b00037300027405b47505f07608827607507705f07805f07905787a0001840002850003860003870003880003890001");
        addAsset(7, Type.Kind, false, "Female 3", hex"34000835000c3609c337000d38000c390004430008440961440a804509f0460b484609304709f04809f04909d24a09c34b09c353000a5409f05509f0560c20560b105609c05709f05809f05913405909b05a09695b09f063000a6409f06509f06609f06709f06809e16913506909a06a095a6b00037300027409b47509f0760c82760b507709f07809f07909787a0001840002850003860003870003880003890001");
        addAsset(8, Type.Kind, false, "Female 4", hex"34000835000c360dc337000d38000c390004430008440e81440d60450df0460d38460f40470df0480df0490dd24a0dc34b0dc353000a540df0550df0560dc0560f10561020570df0580df0591340590db05a0d695b0df063000a640df0650df0660df0670df0680de1691350690da06a0d5a6b0003730002740db4750df0760f52761080770df0780df0790d787a0001840002850003860003870003880003890001");
        addAsset(9, Type.Kind, true, "Zombie", hex"26000c2700043314863414c33514c33614f03714c33814c33914c33a14c33b14c342000a4315804314704415104414e04514704516804614304616804617404714f04814f04914f04a14f04b14f052000a5314f05414f05514d05516205614e15714f05814f05914345916805a145a5b000362000a6314f06414f06514f06614f067145a6814f06914a56a145a7200027314b47414f07514507516a07614847616207617107714f07814f07914f07a1416830002840003850003860003870003880003890003");
        addAsset(10, Type.Kind, true, "Ape", hex"26000c2700043318863418c33518c33618f03718c33818c33918c33a18c33b18c342000a4318f0441878451970451a804619b44719d04718204819804818704919c34a18b44b18f052000a5318f054185a5519d0551a20561b105619e05719785819f05919a55a195a5b000362000a6318f064185a6519f06619f06719786819f06919a56a195a7200027318b47418d2751950751aa0761b417619a07719f07819b07818407919e17a1916830002840003850003860003870003880003890003");
        addAsset(11, Type.Kind, true, "Alien", hex"250008261c49270004331c86341cc3351cc3361ce0361d10371cc3381cc3391cc33a1cc33b1cc342000a431c70431e80441ce0441e10451c70451f80461cb4471cf0481cf0491cf04a1cf04b1cf052000a531cf0541cf0551cd2561ce0561d10571cf0581cf0591ca55a1c5a5b000362000a631cf0641cf0651cf0661cf0671cc0671d30681ce0681d10691ca56a1c5a720002731cb4741cf0751c58751f20761ca1761d40771cf0781cf0791ce17a1c16830002840003850003860003870003880003890003");
        addAsset(12, Type.Face, true, "Rosy Cheeks", hex"472080482040572020772080782040");
        addAsset(13, Type.Beard, true, "Luxurious Beard", hex"37000838000c39000c48000f49000f4a000f4b000458000a59214b5a000f5b000568000a69215a6a000f6b000578000e79000f7a000f7b0001880003890003");
        addAsset(14, Type.Hair, true, "Clown Hair Green", hex"1422a01522d02322e02422f02522f02622d03222e03322703422303522304222107222d07322408222208322f08422f08522f08622d08700049322209422b09522f0962210a42220a52210");
        addAsset(15, Type.Hair, true, "Mohawk Dark", hex"42000c51000e52000f53000460000a61000f620007630003");
        addAsset(16, Type.Hair, true, "Cowboy Hat", hex"1323201423d02423f03223c03324a03323403423f04123a04223f04324a04323504423f05223f05324a05323505423f06123806223f06324a06323506423f07123207223f07324a07323507423f08324208423f09423f0a32320a42310");
        addAsset(17, Type.Beard, true, "Mustache", hex"5825a06825a0782520");
        addAsset(18, Type.Nose, true, "Clown Nose", hex"6726f0");
        addAsset(19, Type.Smoke, true, "Cigarette", hex"69000478000a79275a88000a89275a9528c09628c09728c098000a99271a992940a90001");
        addAsset(20, Type.Eyes, true, "Nerd Glasses", hex"350008452a87462a4b552a2d562a1e65000e66000c752aa5762a5a850003860003");
        addAsset(21, Type.Eyes, true, "Regular Shades", hex"25000835000a45000a46000d55000a56000765000a75000a76000d85000a860007");
        addAsset(22, Type.Hair, true, "Knitted Cap", hex"24000c332b80342c70342b80432bf0442c70442b80532bf0542c70542b80632bf0642c70642b80732bb0742c70742b80842c3c");
        addAsset(23, Type.Beard, true, "Shadow Beard", hex"372d80382dc0392d40482db0492df04a2d40582da0592db0592e405a2d50682da0692da0692e506a2d50782de0792df07a2d10");
        addAsset(24, Type.Mouth, true, "Frown", hex"590002");
        addAsset(25, Type.Hair, true, "Cap Forward", hex"320008332f4333308034304b422f254230804330f044301e5230a553305a542f5a6230a563305a642f5a72302973305a742f5a83000b842f5a940003");
        addAsset(26, Type.Beard, true, "Goat", hex"5a0bc05b00046a0bf06b0b16");
        addAsset(27, Type.Face, true, "Mole", hex"483110");
        addAsset(28, Type.Hair, true, "Purple Hair", hex"1332801432a01532a01632e01732802232a02332e02432f02532f02632302732f02832e02932403232b03332f03432f03532304132804232f04332f04432105132805232f05332f06232f06332f07232207332f0743240833220843230");
        addAsset(29, Type.Eyes, true, "Small Shades", hex"35000836000145000a46000c55000a56000365000a75000a76000f");
        addAsset(30, Type.Hair, true, "Shaved Head", hex"3333803433c04333f04433505333f05433506333f06433507333b07433d0");
        addAsset(31, Type.Eyes, true, "Classic Shades", hex"35000445348746354955342d56351665000d6600047534a576355a850003860001");
        addAsset(32, Type.Smoke, true, "Vape", hex"69000478000a79365a88000a89365a98000a99361a993740a80002a90003");
        addAsset(33, Type.Neck, true, "Silver Chain", hex"3b38404b3850");
        addAsset(34, Type.Mouth, true, "Smile", hex"580002");
        addAsset(35, Type.Eyes, true, "Big Shades", hex"34000835000e36000444000a4539a0453a50463b5a54000a55392c553a10563b1664000865000d66000474000a7539a0753a50763b5a84000a85392c853a10863b16");
        addAsset(36, Type.Hair, true, "Mohawk Thin", hex"500008513cc3523cc1533c41610003620001630001");
        addAsset(37, Type.Hair, true, "Beanie", hex"333de0343d50413d80423da0433d70433e80443e50443fa0513da0523ea4533ef0543e50543fa0613da0624080623e20634040633eb0643e50643fa07240207340f0744040743e10743f20834020844010");
        addAsset(38, Type.Hair, true, "Cap", hex"3241803341f03441504241f04341f04441505241f05341f05441506241706242806341f06441507241b07341e07342107441508341a0844150934120944150");
        addAsset(39, Type.Eyes, true, "Clown Eyes Green", hex"4522404543804622805543205644107522107543a0762220764440");
        addAsset(40, Type.Beard, true, "Normal Beard Black", hex"37000838000c39000448000b49000f4a000458000a59074b5a000568000a69075a6a000578000e79000f7a0001");
        addAsset(41, Type.Smoke, true, "Medical Mask", hex"3645903945404745904845404846804945d05745a05845f05945f05a45506746206745806845f06945f06a4550774560784510784620794570");
        addAsset(42, Type.Beard, true, "Normal Beard", hex"370b80380bc0390b40480bb0490bf04a0b40580ba0590bb45a0b50680ba0690ba56a0b50780be0790bf07a0b10");
        addAsset(43, Type.Eyes, true, "VR", hex"35478636474944000a45471845486046489446472047000554000a55485a5648a557000564000a65485a6648a567000574000a75485a7648a577000584000285471c85482086481c864720870001");
        addAsset(44, Type.Eyes, true, "Eye Patch", hex"35000445000f46000d55000f560007650005750005");
    }
    
    function initializeAdditionalInternalState3() external onlyOwner {
        addAsset(45, Type.Hair, true, "Wild Hair", hex"12000c13000414000e15000816000422000a23000f24000f25000f26000e27000131000a32000f33000f34000f35000f36000f42000f43000f44000752000f53000f54000d61000a62000f63000f64000271000a72000f73000f74000d81000282000a83000f84000f85000f86000f870004920007930007940001950003");
        addAsset(46, Type.Hair, true, "Top Hat", hex"23000824000530000831000f32000f33495a34000540000a41000f42000f43495a44000550000a51000f52000f53495a54000560000a61000f62000f63495a64000570000a71000f72000f73495a74000581000382000383491a840005940001");
        addAsset(47, Type.Hair, true, "Bandana", hex"144a90144b40154ac0244a10244b60244c80254c10334b60334a80344a40344c10424ba0434af0444b50524ba0534af0544b50624ba0634af0644a50644ba0724ba0734af0744a10744b60834b30");
        addAsset(48, Type.Beard, true, "Handlebars", hex"584d20580b80590b30680ba0784d20790b30");
        addAsset(49, Type.Hair, true, "Frumpy Hair", hex"23000c24000c25000c32000e33000f34000f35000f36000f41000a424e6943000f44000f45000151000a52000f53000f54000d55000461000a62000f63000f64000f65000771000272000f73000f74000f82000283000f84000f");
        addAsset(50, Type.Hair, true, "Crazy Hair", hex"134fb0154fc0174f40224fa0234fe0244ff0254f78264f34314fe0324ff0334ff0344f50414f20424ff0434ff0444f70514fa0524ff0534ff0614fb0624fb0634ff0644f10724ff0734ff0744f10814f20824fb0834ff0844f10934f70");
        addAsset(51, Type.Hair, true, "Police Cap", hex"2200082300043250a5330e823350503400054250a5430e8243505044504951000a525070525180530e8253505054505a6100026250b4630e8263505064505a7250a5730e8273505074505a82502983501684501e");
        addAsset(52, Type.Mouth, true, "Buck Teeth", hex"590e40690e40");
        addAsset(53, Type.Hair, true, "Do-rag", hex"3352803452c04352704353804453104452e05352f05452f06352f06452f07352b07452f0");
        addAsset(54, Type.Beard, true, "Front Beard", hex"580ba0590bb05a0bc05b0004680ba0690ba06a0bf06b0005780b20790b30");
        addAsset(55, Type.Face, true, "Spots", hex"3654804854404a54105454106a5410745410775410785480");
        addAsset(56, Type.Beard, true, "Big Beard", hex"29000c2a0004380b80390bf03a0b58480be0490bf04a0bf04b0005580bf0590bb05a0bf05b0b49680bf0690ba06a0bf06b0b5a780bf0790bf07a0bf07b0b5a880b28890b3c8a0b3c8b0001");
        addAsset(57, Type.Hair, true, "Vampire Hair", hex"33000834000c38000c39000443000749000153000d63000f640003730009");
        addAsset(58, Type.Hair, true, "Peak Spike", hex"32000c33000540000841000f42000f50000851000f52000f53000d60000861000f62000563000171000372000d730004830001");
        addAsset(59, Type.Beard, true, "Chinstrap", hex"370b80380bc0480b30490bf04a0b405a0bd05b00046a0bf06b0005780bc0790bc07a0b10");
        addAsset(60, Type.Hair, true, "Fedora", hex"1455802455f033554a3455f04155804255f043555a4455f05155a05255f053555a5455f06155a06255f063555a6455f072553073555a7455f08300028455f09455b0");
        addAsset(61, Type.Ear, true, "Earring", hex"275649");
        addAsset(62, Type.Eyes, true, "Horned Rim Glasses", hex"35000c4557a54657f055572d5657306557876657c07557a57657f085000d");
        addAsset(63, Type.Hair, true, "Headband", hex"330e80345840430ea0445850530ea0545850630ea0645850730ea0745850");
        addAsset(64, Type.Smoke, true, "Pipe", hex"6900087959297a59498a59298b5949965ac099000a9a5b839a59409b595aa55a20a65af0a75a20a85a20a9000aaa5b80aa5970ab5b16b90002ba0003");
        addAsset(65, Type.Hair, true, "Messy Hair", hex"23000824000832000833000f34000f42000f43000f44000d45000152000f53000f54000562000f63000f64000365000172000e73000f74000d83000784000b");
        addAsset(66, Type.Beard, true, "Front Beard Dark", hex"585ca0595cb05a5cc05b0004685ca0695ca06a5cf06b0005785c20795c30");
        addAsset(67, Type.Hair, true, "Hoodie", hex"15000816000c173cc3183cc3193c491a0004230008243cc3253ce1263c3c27000f28000f293c2d2a3c962b3cc3320008333ce1343c783500033700033800033900033a00033b0003423ca5433cf044000551000a523cf0533cf05400055a00085b000f610002623cb4633cf06400056a000a6b3c69723c29733cf0743c497a000e7b3c5a833c29843cf0853cc386000f87000f88000f89000f8a3c698b0001940003953c29963c3c973cc3983cc3993c699a0001a70003a80003a90001");
        addAsset(68, Type.Neck, true, "Gold Chain", hex"3a5d404a5d204b5d40");
        addAsset(69, Type.Beard, true, "Muttonchops", hex"370b80380bc0480bb0490b50780bc0790b40");
        addAsset(70, Type.Hair, true, "Stringy Hair", hex"43000c44000352000853000c54000963000c740003");
        addAsset(71, Type.Eyes, true, "Eye Mask", hex"35000c36000f450007465e4b55000d56000e65000f66000f750005765e1a850003860003");
        addAsset(72, Type.Eyes, true, "3D Glasses", hex"355fd0455f70456080465fb0466040555f505560a0565fa0566050655f70656180665fb0666140755f507561a0765fa0766150855f30865f30");
        addAsset(73, Type.Eyes, true, "Clown Eyes Blue", hex"4562404563804662805563205664107562107563a0766220766440");
        addAsset(74, Type.Hair, true, "Mohawk", hex"426584510b86520be0526510530b4060000a610b3c620b34630b30");
    }
}

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

